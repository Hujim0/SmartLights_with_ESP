#pragma region fastled include

#define FASTLED_ESP8266_RAW_PIN_ORDER
#define FASTLED_ESP8266_NODEMCU_PIN_ORDER
#define FASTLED_ESP8266_D1_PIN_ORDER
#define FASTLED_ALLOW_INTERRUPTS 0

#include <Arduino.h>
#include <FastLED.h>

#pragma endregion

#define DEBUG_HEAP
#define DEBUG_PREFERENCES
#define DEBUG_WIFI

#include <main.h>
#include <ModeHandler.h>
#include <NetworkManager.h>
#include <FileSystem.h>

#include <ArduinoJson.h>

CRGB leds[NUMPIXELS];

ModeHandler modeHandler;
NetworkManager network = NetworkManager();

DynamicJsonDocument preferences(1024);

#define INITIAL_DELAY 3000

void OnClientConnected(int);
void OnWebSocketMessage(String);
void ChangeModeFromPreferences();

void ledSetup()
{
    pinMode(STRIP_PIN, OUTPUT);

    FastLED.addLeds<STRIP, STRIP_PIN, COLOR_ORDER>(leds, NUMPIXELS);

    FastLED.clearData();
    FastLED.clear();
}

void setup()
{
    delay(INITIAL_DELAY);

    Serial.begin(115200);
    Serial.println("[ESP] loaded");

    FSBegin();

    // preferences load
    Serial.println("[ESP] loading preferences...");

    String preferences_json = GetPreferences();
    deserializeJson(preferences, preferences_json);

#ifdef DEBUG_PREFERENCES
    Serial.print("Loaded settings: ");
    Serial.println(preferences_json);

    Serial.println("------------------------------------------------------------------");
#endif

    // network setup
    String wifi_data[2];
    GetWifiSettings(wifi_data);

#ifdef DEBUG_WIFI
    Serial.println("Wifi config:");
    Serial.print("ssid: ");
    Serial.println(wifi_data[0].c_str());
    Serial.print("pass: ");
    Serial.println(wifi_data[1].c_str());
    Serial.println("------------------------------------------------------------------");
#endif

    network.Begin(wifi_data[0].c_str(), wifi_data[1].c_str());

    network.OnNewClient(OnClientConnected);
    network.OnNewMessage(OnWebSocketMessage);

    ledSetup();

    ChangeModeFromPreferences();
}

unsigned long timer = millis();

void loop()
{
#ifdef DEBUG_HEAP
    if (timer + 1000 <= millis())
    {
        Serial.print("Avalible ram: ");
        Serial.print(ESP.getFreeHeap());
        Serial.println(" bytes");
        timer = millis();
        ESP.resetHeap();
    }
#endif

    network.CleanUp();

    if (modeHandler.led_state)
    {
        modeHandler.update(leds);
    }
    FastLED.show();
}

void OnClientConnected(int id)
{
    String json;
    serializeJson(preferences, json);
    network.SentTextToClient(id, json.c_str());
}

void OnWebSocketMessage(String data)
{
    modeHandler.ChangeModeFromJson(data, preferences);
    String json;
    serializeJsonPretty(preferences, json);
    SavePreferences(json);
}

void ChangeModeFromPreferences()
{
    modeHandler.LightSwitch(preferences["light_switch"].as<bool>());
    FastLED.setBrightness(preferences["brightness"].as<int>());

    int last_id = preferences["mode"].as<int>();
    StaticJsonDocument<512> args = preferences["args"][last_id];

    modeHandler.ChangeMode(
        last_id, args);

    args.garbageCollect();
}